@using System.Activities.Expressions
@model IEnumerable<WDS.Models.VarificationEntityModel>
@{
    ViewBag.Title = "BillFilesDetails";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid">
    <div class="card">
        <div class="card-header"></div>
        <div class="card-body">
            <table class="table table-striped table-bordered" id="varification_tbl">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>Description</th>
                        <th>Remarks</th>
                        <th>Decision</th>
                        <th>Status</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model != null && Model.Any())
                    {
                        int ite = 0;
                        string rName = "rdApprove";
                        foreach (var model in Model)
                        {
                            rName = rName + ite;
                            <tr>
                                @Html.HiddenFor(modelItem => model.CheckListId)
                                <td class="tdId">@Html.DisplayFor(modelItem => model.Id)</td>
                                <td class="tdDesc">@Html.DisplayFor(modelItem => model.Description)</td>
                                <td>@Html.TextAreaFor(modelItem => model.Remarks, 2, 1, new { @class = "form-control txtRemarks" })</td>
                                <td>
                                    @Html.RadioButtonFor(modelItem => model.IsApproved, "Approve" , new{@Name=rName}) Approve<br />
                                    @Html.RadioButtonFor(modelItem => model.IsApproved, "Decline", new { @Name = rName }) Decline
                                </td>
                                <td>
                                    <input type="button" class="btn btn-sm btn-outline-success" value="Save" onclick="investigation_submission($(this))" />

                                </td>
                            </tr>
                            rName = "rdApprove";
                            ite += 1;
                        }
                    }
                </tbody>
            </table>

        </div>
    </div>
</div>
    
    
    
    
<script type="text/javascript">
    function investigation_submission(ths) {
        

        iziToast.show({
            theme: 'dark',
            icon: 'icon-person',
            title: 'Hey',
            message: 'Are you sure to save your opinion?',
            position: 'center', // bottomRight, bottomLeft, topRight, topLeft, topCenter, bottomCenter
            progressBarColor: 'rgb(0, 255, 184)',
            buttons: [
                ['<button>Ok</button>', function (instance, toast) {

                    instance.hide({
                        transitionOut: 'fadeOutUp'
                    }, toast);

                    var checkListId = ths.closest('tr').find('input[type="hidden"]').val();
                    var id = ths.closest('tr').find('.tdId').html();
                    var description = ths.closest('tr').find('.tdDesc').html();
                    var remarks = ths.closest('tr').find('.txtRemarks').val();
                    var decision = ths.closest('tr').find('input[type="radio"]:checked').val();
                    console.log(checkListId + id + description + remarks + "--" + decision);
                    $.ajax({
                        url: '@Url.Action("SaveInvestigationOpinion", "Document")',
                        type: "POST",
                        data: { id: id, checkListId: checkListId, description: description, remarks: remarks, decision: decision },
                        dataType: "json",
                        //contentType: "application/json",
                        success: function (result) {
                            //console.log(result);
                            //$('div#partialTable').html(result);
                            //$("#recomModal").modal("show");

                            alert(result);
                        },
                        error: function () { }
                    });

                }, true], // true to focus
                ['<button>Close</button>', function (instance, toast) {

                    instance.hide({
                        transitionOut: 'fadeOutUp',
                        onClosing: function (instance, toast, closedBy) {
                            console.info('closedBy: ' + closedBy); // The return will be: 'closedBy: buttonName'
                        }
                    }, toast, 'buttonName');
                }]
            ],
            onOpening: function (instance, toast) {
                console.info('callback abriu!');
            },
            onClosing: function (instance, toast, closedBy) {
                console.info('closedBy: ' + closedBy); // tells if it was closed by 'drag' or 'button'


            }
        });




        
    }
</script>

