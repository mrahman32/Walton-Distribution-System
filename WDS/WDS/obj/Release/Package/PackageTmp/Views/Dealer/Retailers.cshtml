@model IEnumerable<WDS.DAL.WdsEntities.RetailerInfo>
@{
    ViewBag.Title = "Retailers";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
/*adding row numbers through css*/
    .css-serial {
        counter-reset: serial-number; /* Set the serial number counter to 0 */
    }

    .css-serial td:first-child:before {
        counter-increment: serial-number; /* Increment the serial number counter */
        content: counter(serial-number); /* Display the counter */
    }

</style>

<div class="container-fluid">
    
    
    @if (TempData["message"] != null)
    {
        var msgType = TempData["messageType"];
        var msg = TempData["message"];
        if ((int)msgType == 1)
        {
            TempData["message"] = null;
            TempData["messageType"] = 0;
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                <strong>Message: </strong> @msg
                <a href="#" class="close" data-dismiss="alert" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </a>
            </div>

        }
        else if ((int)msgType == 2)
        {
            TempData["message"] = null;
            TempData["messageType"] = 0;
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                <strong>Message: </strong> @msg
                <a href="#" class="close" data-dismiss="alert" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </a>
            </div>

        }
        else if ((int)msgType == 3)
        {
            TempData["message"] = null;
            TempData["messageType"] = 0;
            <div class="alert alert-warning alert-dismissible fade show" role="alert">
                <strong>Message: </strong> @msg
                <a href="#" class="close" data-dismiss="alert" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </a>
            </div>
        }
    }

    <div class="row">
        <div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12">
            <div class="card">
                <div class="card-header">
                    <div class="row">
                        <div class="col-lg-8">
                            Retailers (@Html.ActionLink("Create New Retailer", "CreateRetailer", new {@style = "color: orange;"}))
                        </div>
                        <div class="col-lg-4">
                            @*<span style="text-align: right">Total Retailer: 50</span>*@
                        </div>

                    </div>

                </div>
                <div class="card-body">
                    <table class="table table-striped table-bordered" id="sample_1">
                        <thead>
                        <tr>
                            @*<th>#</th>*@
                            <th>Retailer Name</th>
                            <th>Address</th>
                            <th>Owner Name</th>
                            <th>Mobile Number</th>
                            <th>Payment No.</th>
                            <th>Payment Type</th>
                            <th>Status</th>
                            <th>Action</th>
                        </tr>
                        </thead>
                        <tbody>
                        @if (Model.Any())
                        {
                            foreach (var model in Model)
                            {
                                <tr>
                                    @Html.HiddenFor(modelItem => model.Id)
                                    @*<td></td>*@
                                    <td>@Html.DisplayFor(modelItem => model.RetailerName)</td>
                                    <td>@Html.DisplayFor(modelItem => model.RetailerAddress)</td>
                                    <td>@Html.DisplayFor(modelItem => model.OwnerName)</td>
                                    <td>@Html.DisplayFor(modelItem => model.PhoneNumber)</td>
                                    <td>@Html.DisplayFor(modelItem => model.PaymentNumber)</td>
                                    <td>@Html.DisplayFor(modelItem => model.PaymentNumberType)</td>
                                    <td>
                                        @if (model.IsActive == true)
                                        {
                                            <span class="badge badge-success">Active</span>
                                        }
                                        else
                                        {
                                            <span class="badge badge-danger">Not Active</span>
                                        }
                                    </td>
                                    <td>
                                        @*@if (model.IsActive == true)
                                            {
                                                  <input type="button" class="btn btn-sm btn-outline-warning" value="Print" onclick="location.href='@Url.Action("PrintRetailer", "Dealer", new { rId = model.Id })'" />
                                            }*@
                                        @if (model.IsActive == true)
                                        {
                                            <input type="submit" value="Edit" class="btn btn-outline-info btn-sm" onclick="location.href = '@Url.Action("EditRetailer", "Dealer", new {id = model.Id})'" />
                                        }
                                       
                                        @if (model.IsDeletionRequested == true && model.IsDeletionApproved == null)
                                        {
                                            <span class="badge badge-danger">DEL. REQ</span>
                                        }
                                        else
                                        {
                                            <input type="button" value="Deactivate" class="btn btn-outline-danger btn-sm" onclick="deactivate_Retailer($(this))" />
                                        }
                                        
                                        <input type="button" class="btn btn-sm btn-outline-warning" value="Print" onclick="location.href = '@Url.Action("PrintRetailer", "Dealer", new {rId = model.Id})'"/>

                                    </td>
                                </tr>
                            }
                        }
                        </tbody>
                    </table>

                </div>
            </div>
        </div>
    </div>
</div>

<link href="~/Content/iziToast.min.css" rel="stylesheet" />

@section scripts
{


    <script src="~/Scripts/iziToast.min.js"></script>
    <script type="text/javascript">
        $(function() {
            //$('#sample_1').DataTable();
            //$('#sample_1').DataTable({
            //    dom: 'Bfrtip',
            //    buttons: [

            //        //'copyHtml5',
            //        'excelHtml5',
            //        //'csvHtml5',
            //        //'pdfHtml5'
            //    ]
            //});
            //var table = $('#sample_1').DataTable();
            var table = $('#sample_1').DataTable();
            new $.fn.dataTable.Buttons(table, {
                buttons: [
                    { extend: 'excel', className: 'excelBtn', title: 'Data export Retailer', text: 'Click For Excel Export' }
                ]
            });

            table.buttons(0, null).container().prependTo(
                table.table().container()
            );
        });

        function deactivate_Retailer(ths) {
            var id = ths.closest('tr').find('input[type="hidden"]').val();
            iziToast.show({
                theme: 'dark',
                icon: 'icon-person',
                title: 'Hey',
                message: 'Are you sure to Deactivate this Retailer?',
                position: 'center', // bottomRight, bottomLeft, topRight, topLeft, topCenter, bottomCenter
                progressBarColor: 'rgb(0, 255, 184)',
                buttons: [
                    [
                        '<button>Ok</button>', function(instance, toast) {

                            instance.hide({
                                    transitionOut: 'fadeOutUp'
                                },
                                toast);
                            $.ajax({
                                url: ' @Url.Action("DeactivateRetailer", "Dealer")', //Changed For test
                                type: 'Post',
                                //data: JSON.stringify({ statusList: packagingQcList }),
                                data: JSON.stringify({ id: id }),
                                dataType: 'json',
                                async: false,
                                contentType: 'application/json',
                                success: function(result) {
                                    if (result.Id == 1) {
                                        iziToast.success({
                                            title: 'Success',
                                            message: result.Message,
                                        });
                                        remove_row(ths);
                                    } else if (result.Id == 0) {
                                        //show error toast
                                        //toastr.error(result.Message);
                                        iziToast.error({
                                            title: 'Error',
                                            message: result.Message,
                                        });
                                    }
                                },
                                error: function(result, textStatus, jqXHR) {
                                    iziToast.error({
                                        title: 'Error',
                                        message: 'Connection Error !!!',
                                    });
                                }
                            });
                        }, true
                    ], // true to focus
                    [
                        '<button>Close</button>', function(instance, toast) {

                            instance.hide({
                                    transitionOut: 'fadeOutUp',
                                    onClosing: function(instance, toast, closedBy) {
                                        console.info('closedBy: ' +
                                            closedBy); // The return will be: 'closedBy: buttonName'
                                    }
                                },
                                toast,
                                'buttonName');
                        }
                    ]
                ],
                onOpening: function(instance, toast) {
                    console.info('callback abriu!');
                },
                onClosing: function(instance, toast, closedBy) {
                    console.info('closedBy: ' + closedBy); // tells if it was closed by 'drag' or 'button'


                }
            });


        }
    </script>
}